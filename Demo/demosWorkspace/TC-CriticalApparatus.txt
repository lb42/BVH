 Critical Apparatus 
 Scholarly editions of texts, especially texts of great antiquity or importance, often record some or all of the known variations among different witnesses to the text. Witnesses to a text may include authorial or other manuscripts, printed editions of the work, early translations, or quotations of a work in other texts. Information concerning variant readings of a text may be accumulated in highly structured form in a critical apparatus of variants. This chapter defines a module for use in encoding such an apparatus of variants, which may be used in conjunction with any of the modules defined in these Guidelines. It also defines an element class which provides extra attributes for some elements of the core tag set when this module is selected. In printed critical editions, the apparatus takes the form of highly-compressed notes at the bottom of each page. TEI’s critical apparatus module allows variation to be encoded so that such notes may be generated, but it also models the variation so that, for example, interactive editions in which readers can choose which witness readings to display are possible. 
 Information about variant readings (whether or not represented by a critical apparatus in the source text) may be recorded in a series of apparatus entries, each entry documenting one variation, or set of readings, in the text. Elements for the apparatus entry and readings, and for the documentation of the witnesses whose readings are included in the apparatus, are described in section . Special tags for fragmentary witnesses are described in section . The available methods for embedding the apparatus in the rest of the text, or for linking an external apparatus to the base text, are described in section . Finally, several extra attributes for some tags of the core tag set, made available when the additional tag set for text criticism is selected, are documented in section . 
 Many examples given in this chapter refer to the following texts of the opening (usually just line 1) of Chaucer's Wife of Bath's Prologue, as it appears in each of the four different manuscripts Ellesmere, Huntingdon Library 26.C.9 (El) Hengwrt, National Library of Wales, Aberystwyth, Peniarth 392D (Hg) British Library Lansdowne 851 (La) Bodleian Library Rawlinson Poetic 149 (Ra2) 
 The Apparatus Entry, Readings, and Witnesses 
 This section introduces the fundamental markup methods used to encode textual variations: the app element for entries in the critical apparatus: see section . elements for identifying individual readings: see section . ways of grouping readings together: see section . methods of identifying which witnesses support a particular reading, and for describing the witnesses included in the apparatus: see section . elements for indicating which portions of a text are covered by fragmentary witnesses: see section . 
 The app element is in one sense a more sophisticated and complex version of the choice element introduced in as a way of marking points where the encoding of a passage in a single source may be carried out in more than one way. Unlike choice, however, the app element allows for the representation of many different versions of the same passage taken from different sources. 
 The Apparatus Entry 
 Individual textual variations are encoded using the app element, which groups together all the readings constituting the variation. The identification of discrete textual variations or apparatus entries is not a purely mechanical process; different editors may group readings differently. No rules are given here as to how to group readings into apparatus entries; the tags given here may be used to group readings in whatever way the editor finds most perspicuous or useful. 
 The individual apparatus entry is encoded with the app element: 
 The attributes loc, from, and to, are used to link the apparatus entry to the base text, if present. In such cases, several methods may be used for such linkage, each involving a slightly different usage for these attributes. Linkage between text and apparatus is described below in section . For the use of the app element without a base text, see . 
 Each app element usually comprises one or more readings, which in turn are encoded using the rdg or other elements, as described in the next section. A very simple partial apparatus for the first line of the Wife of Bath's Prologue might take a form something like this: Of course, in practice the apparatus will be somewhat more complex. Specifically, it may be desired to record more obviously that manuscripts El and La agree on the words noon Auctoritee, to indicate a preference for one reading, etc. The following sections on readings, subvariation, and witness information describe some of the more important complications which can arise. 
 Readings 
 Individual readings are the crucial elements in any critical apparatus of variants. The following elements should be used to tag individual readings within an apparatus entry: N.B. the term lemma is used here in the text-critical sense of the reading accepted as that of the original or of the base text. This sense differs from that in which the word is used elsewhere in the Guidelines, for example as in the attribute lemma where the intended sense is the root form of an inflected word, or the heading of an entry in a reference book, especially a dictionary. 
 In recording readings within an apparatus entry, the rdg element should always be used; each app usually contains at least one rdg, though it may contain only notes. 
 The lem element may also be used to record the base text of the source edition, to mark the readings of a base witness, to indicate the preference of an editor or encoder for a particular reading, or (e.g. in the case of an external apparatus) to indicate precisely to which portion of the main text the variation applies. Those who prefer to work without the notion of a base text or who are not using the parallel segmentation method may prefer not to use it at all. How it is used depends in part on the method chosen for linking the apparatus to the text; for more information, see section . 
 Readings may be encoded individually, or grouped for perspicuity using the rdgGrp element described in section . 
 As members of the attribute classes att.witnessed and att.textCritical, both of these elements inherit the following attributes. These elements also inherit the following attributes from the att.global.responsibility class: As elsewhere, these attributes may be used to indicate the person responsible for the editorial decision being recorded, and also the degree of certainty associated with that decision by the person carrying out the encoding. 
 The wit attribute identifies the witnesses which have the reading in question. It is required if the apparatus gathers together readings from different witnesses, but may be omitted in an apparatus recording the readings of only one witness, e.g. substitutions, divergent opinions on what is in the witness or on how to expand abbreviations, etc. Even in such a one-witness apparatus, however, the wit attribute may still be useful when it is desired to record the occurrence of a particular reading in some other witness. For other methods of identifying the witnesses to a reading, see section . 
 The type attribute allows the encoder to classify readings in any convenient way, for example as substantive variants of the lemma: or as orthographic variants: 
 The varSeq and cause attributes may be used to convey information on the sequence and cause of variation. In the following apparatus fragment, the reading Eryment is tagged as sequential to (derived from) the reading Experiment, and the cause is given as loss of the abbreviation for per. 
 If a manuscript is written in several hands, and it is desired to report which hand wrote a particular reading, the hand attribute should be used. For example, in the Munich manuscript containing the Carmina Burana, the word alle has been changed to allen: 
 Similarly, if a witness is hard to decipher, it may be desired to indicate responsibility for the claim that a particular reading is supported by a particular witness. In line 2212a of Beowulf, for example, the manuscript is read in different ways by different scholars; the editor Klaeber prints one text, using parentheses to indicate his expansion, and records in the apparatus two different accounts of the manuscript reading, by Zupitza and Chambers: 
 The hand and resp attributes are intelligible only on an element recording a reading from a single witness, and should not be used if more than one witness is given on the same rdg or lem element. If more than one witness is given for the reading, they are undefined. To convey this information when the witness is one among several, the witDetail element should be used; see section . 
 Where there is a greater weight of editorial discussion and interpretation than can conveniently be expressed through the attributes provided on these elements (for example where there are multiple witnesses for a single reading or multiple editorial responsibility for an emendation) this information can be attached to the apparatus in a note, or recorded in the feature structure notation defined in chapter . In particular, such recurring text-critical situations as palaeographic confusion of particular letters, or homœoarchy or homœoteleuton involving specific character groups, may lend themselves to feature structure treatment. Information concerning these recurrent situations may be encoded into database-like fragments within the text which would then be available to sophisticated computer-assisted analysis. Further work remains to be done on such mechanisms, however, and so no examples are given here of the use of feature structures in text-critical apparatus. 
 The note element may also be used to record the specific wording of notes in the apparatus of the source edition, as here in a transcription of Friedrich Klaeber's note on Beowulf 2207a: Notes providing details of the reading of one particular witness should be encoded using the specialized witDetail element described in section . 
 Encoders should be aware of the distinct fields of use of the attribute values wit, hand, and resp. Broadly, wit identifies the physical entity in which the reading is found (manuscript, clay tablet, papyrus, printed edition); hand refers to the agent responsible for inscribing that reading in that physical entity (scribe, author, inscriber, hand 1, hand 2); resp indicates the scholar responsible for asserting the existence of that reading in that physical entity. In some cases, the categories may blur: a scholar may produce an edition introducing readings for which he or she is responsible; that edition may itself become a witness in a later critical apparatus. Thus, readings introduced as corrections in the earlier edition will be seen in the later apparatus as witnessed by the earlier edition. As observed in the discussion concerning the discrimination of hand and resp in transcription of primary sources in section , the division of layers of responsibility through various scholars for particular aspects of a particular reading may require the more complex mechanisms for assigning responsibility described in chapter . 
 Indicating Subvariation in Apparatus Entries 
 The rdgGrp element may be used to group readings, either because they have identical values on one or more attributes, or because they are seen as forming a self-contained variant sequence, or for some other reason. This grouping of readings is entirely optional: no such grouping of readings is required. 
 The rdgGrp element is a member of class att.textCritical and therefore can carry the wit, type, cause, varSeq, hand, and resp attributes described in the preceding section. When values for any of these attributes are given on a rdgGrp element, the values given are inherited by the rdg or lem elements nested within the reading group, unless overridden by a new specification on the individual reading element. 
 To indicate that both Hg and La vary only orthographically from the lemma, one might tag both readings , as shown in the preceding section. This fact can be expressed more perspicuously, however, by grouping their readings into a rdgGrp, thus: 
 Similarly, rdgGrp may be used to organize the substantive variants of an apparatus entry. Editors may need to indicate that each of a group of witnesses may be taken as all supporting a particular reading, even though there may be variation concerning the exact form of that reading in, or the degree of support offered by, those witnesses. For example: one may identify three substantive variants on the first word of Chaucer's Wife of Bath's Prologue in the manuscripts: these might be expressed in regularized spelling as Experience, Experiment, and Eriment. In fact, the manuscripts display many different spellings of these words, and a scholar may wish both to show that the manuscripts have all these variant spellings and that these variant spellings actually support only the three regularized spelling forms. One may term these variant spellings as subvariants of the regularized spelling forms. 
 This subvariation can be expressed within an app element by gathering the readings into three groups according to the normalized form of their reading. All the readings within each group may be accounted subvariants of the main reading for the group, which may be indicated by tagging it as a lem element or as . 
 In this example, the different subvariants on Experience, Experiment, and Eriment are held within three rdgGrp elements nested within the enclosing app element: From this, one may deduce that the regularized reading Experience is supported by all three manuscripts El Hg Ha4, although the spelling differs in Ha4, and that the regularized reading Eriment is supported by Ra2, even though the form differs in that manuscript. Accordingly, an application which recognizes that these apparatus entries show subvariation may then assign all the witnesses instanced as attesting the sub-variants on that lemma as actually supporting the reading of the lemma itself at a higher level of classification. Thus, Ha4 here supports the reading Experience found in El and Hg, even though it is spelt slightly differently in Ha4. 
 Reading groups may nest recursively, so that variants can be classified to any desired depth. Because apparatus entries may also nest, the app element might also be used to group readings in the same way. The example above is substantially identical to the following, which uses app instead of rdgGrp: This expresses even more clearly than the previous encoding of this material that at the highest level of classification (apparatus entry A1), this variation has three normalized readings, and that the first of these is supported by manuscripts El, Hg, and Ha4; the second by Cp, Ld1, and La; and the third by Ra2. Some encoders may find the use of nested apparatus entries less intuitive than the use of reading groups, however, so both methods of classifying the readings of a variation are allowed. 
 Reading groups may also be used to bring together variants which form an apparent developmental sequence, and to make clear that other readings are not part of that sequence, as in the following example, which makes clear that the variant sequence experiment to eriment says nothing about the relative priority of experiment and experience: 
 Witness Information 
 A given reading is associated with the set of witnesses attesting it by listing the witnesses in the wit attribute on the rdg, lem, or rdgGrp element. Special mechanisms, described in the following sections, are needed to associate annotation on a reading with one specific witness among several (section ), to transcribe witness information verbatim from a source edition (section ), and to identify the formal lists of witnesses typically provided in the front matter of critical editions (section ). 
 Witness Detail Information 
 When it is desired to give additional information about a particular witness or witnesses for the reading, the information may be given in a witDetail element. This is a specialized form of note, which can be linked to both a reading and to one or more of the witnesses for that reading. The former linkage is effected by the target attribute which witDetail inherits from the attribute class att.pointing, and the latter by the wit attribute. 
 Unlike note, witDetail cannot be included in the text at the point of attachment; it must point to the reading(s) being annotated by means of its target attribute. To indicate, on the authority of editor PR, that the Ellesmere manuscript has an ornamental capital in the word Experience, for example, one might write: This encoding makes clear that the ornamental capital mentioned is in the Ellesmere manuscript, and not in Hengwrt or Ha4. The resp attribute assigns responsibility to PR. 
 Like note, witDetail may be used to record the specific wording of information in the source text, even when the information itself is captured in some more formal way elsewhere. The example from the Carmina Burana above (section ), for example, might be extended thus, to record the wording of the note explaining the variant: 
 Observe that a single witness detail element may be linked to several different readings (noting, for example, a recurrent phenomenon in a particular manuscript) by having the target attribute point at all the readings in question. Similarly, feature structures containing information about the text in a witness (whether retroversion, regularization, or other) can also be linked to specific lem and rdg instances. See chapter . 
 Witness Information in the Source 
 In the transcription of printed critical editions, it may be desirable to retain for future reference the exact form in which the source edition records the witnesses to a particular reading; this is particularly important in cases of ambiguity in the information, or uncertainty as to the correct interpretation. The wit element may be used to transcribe such lists of witnesses to a particular reading. The wit list may appear following a rdg, rdgGrp, or lem element in any apparatus entry, and should be used only to transcribe the witness information in the form found in the source. The advantage of holding witness information in the wit attribute of lem or rdg is that an application can check that every sigil for the identifier has been declared elsewhere in the document. Because the wit attribute has declared datatype of one or more data.pointer values, a check can be made that readings are assigned only to witness sigla which have been identified (using the xml:id attribute) within a listWit element (see section ). Such checking is more difficult for witness sigla held as the content of a wit element. For this reason, it is recommended that encoders always hold witness information in the wit attribute of lem and rdg, where possible. Thus, as in the examples below, even when a reference to a witness is exactly reproduced in the wit element, the corresponding sigil for that witness can be written into the wit attribute of the matching rdg or lem. However, in cases where it is uncertain how the witness reference contained in the wit element should be interpreted, or where no witness exists, the wit attribute on the matching rdg or lem may be left empty. Of course, the sigil used for a particular witness in the source, as recorded in the wit element, may well differ from that used to indicated the same witness in the wit attribute, as shown particularly in the apparatus for the second line of the poem (Diet.1.2). 
 The Witness List 
 A list of all identified witnesses should normally be supplied in the front matter of the edition, or in the sourceDesc element of its header. This may be given either as a simple bibliographic list, using the listBibl element described in , or as a listWit element, which contains a series of witness elements. Each witness element may contain a brief characterization of the witness, given as one or more prose paragraphs. If more detailed information about a manuscript witness is available, it should be represented using the msDesc element provided by the msdescription module; a msDesc may appear within a listBibl. 
 Whether information about a particular witness is supplied by means of a bibl, msDesc, or witness element, a unique sigil for this source should always be supplied, using the global xml:id attribute. This identifier can then be used elsewhere to refer to this particular witness. 
 The minimal information provided by a witness list is thus the set of sigla for all the witnesses named in the apparatus. For example, the witnesses referenced by the examples of this chapter might simply be listed thus: 
 It is more helpful, however, for witness lists to be somewhat more informative: each witness element should contain at least a brief prose description of the witness, perhaps including a bibliographic citation, as in the following examples: As the last example shows, the witness description here may be complemented by a reference to a full description of the manuscript supplied elsewhere, typically as the content of a msDesc or bibl element. Alternatively, it may contain a whole paragraph of commentary for each witness: 
 It would however generally be preferable to represent such detailed information using an appropriately structured msDesc element, as discussed in chapter . Note also that if the witnesses being recorded are not manuscripts but printed works, it may be preferable to document them using the standard bibl or biblStruct elements described in , as in this example: 
 In text-critical work it is customary to refer to frequently occurring groups of witnesses by means of a single common sigil. Such sigla may be documented as pseudo-witnesses in their own right by including a nested witness list within the witness list, which uses the sigil for the group as its identifier, and supplies a fuller name for the group in its optional child head element, before listing the other witnesses contained by the group. For example, the Constant Group C of manuscripts comprising witnesses Cp, La, and S12, might be represented as follows: That the reading Experiment occurs in all three manuscripts can now be indicated simply as follows: Note that a single witness cannot appear more than once in a witness list, and therefore cannot be assigned to more than one group of witnesses. 
 Situations commonly arise where there are many more or less fragmentary witnesses, such that there may be quite distinct groups of witnesses for different parts of a text or collection of texts. One may treat this with distinct listWit elements for each different part. Alternatively, one may have a single listWit element at the beginning of the file or in its header listing all the witnesses, partial and complete, for the text, with the attestation of fragmentary witnesses indicated within the apparatus by use of the witStart and witEnd elements described in section . 
 If a witness list is provided, it may be unnecessary to give, in each apparatus entry, an exhaustive list of the witnesses which agree with the base text. An application program can—in principle—compare the witnesses given for each variant found with those given in the full list of witnesses, subtracting from this list all the witnesses not active at this point (perhaps because of lacuna, or because they contain a variation on a different, overlapping lemma) and thence calculate all the manuscripts agreeing with the base text. In practice, encoders may find it less error-prone to list all witnesses explicitly in each apparatus entry. 
 Fragmentary Witnesses 
 If a witness is incomplete (whether a single fragment, a series of fragments, or a relatively complete text with one or more lacunae), it is usually desirable to record explicitly where its preserved portions begin and end. The following empty tags, which may occur within any lem or rdg element, indicate the beginning or end of a fragmentary witness or of a lacuna within a witness: These elements constitute the class model.rdgPart, members of which are permitted within the elements lem and rdg when the module defined by this chapter is included in a schema. 
 Suppose a fragment of a manuscript X of the Wife of Bath's Prologue has a physical lacuna, and the text of the manuscript begins with auctorite. In an apparatus this might appear thus, distinguished from the reading of other manuscripts by the presence of the lacunaEnd element: Alternatively, it may be clearer to record this as since this shows more clearly that the lacuna and the reading of auctorite both appear in witness X. In some cases, the apparatus in the source may commence recording the readings for a particular witness without its being clear whether the previous absence of readings for this witness is due to a lacuna, or to some other reason. The witStart element may be used in this circumstance: 
 Linking the Apparatus to the Text 
 Three different methods may be used to link a critical apparatus to the text: the location-referenced method, the double-end-point-attached method, and the parallel segmentation method. 
 Both the location-referenced and the double end-point methods may be used with either in-line or external apparatus, the former dispersed within the base text, the latter held in some separate location, within or outside the document with the base text. The parallel segmentation method does not use the concept of a base text and may only be used for in-line apparatus. 
 Where an external apparatus is used, the listApp element provides a useful means of grouping together a series of app elements of a specific type, or from a particular source: listApp elements would normally appear in the back of a document, but they may also be placed in any other convenient location. 
 Any document containing app elements requires a variantEncoding declaration in the encodingDesc element of its TEI header, thus: 
 The Location-referenced Method 
 The location-referenced method of encoding apparatus provides a convenient method for encoding printed apparatus; in this method as in most printed editions, the apparatus is linked to the base text by indicating explicitly only the block of text on which there is a variant (noted usually by a canonical reference scheme, or by line number in the edition, such as A 137 or Page 15 line 1). 
 If the location-referenced method is used for an apparatus stored externally to the base text, the TEI header must have the declaration: 
 In the body of the document, the base text (here El) will appear: 
 Elsewhere in the document, or in a separate file, the apparatus will appear. On each app element, the loc attribute should be specified to indicate where the variant occurs in the base text. 
 If the same text is encoded using in-line storage, the apparatus is dispersed through the base text block to which it refers. In this case, the location of the variant can be read from the line in which it occurs. 
 Since the location is not required to be exact, the apparatus for a line might also appear at the end of the line: 
 When the apparatus is linked to the text by means of location references, as shown here, it is not possible to find automatically the precise portion of text varied by the readings. In order to show explicitly what portion of the base text is replaced by the variant readings, the lem element may be used: Often the lemma will have no attributes, being simply the base text reading and requiring no qualification, but it may optionally carry the normal attributes, as shown here. Some text critics prefer to abbreviate or elide the lemma, in order to save space or trouble; such practice is not forbidden by these Guidelines, but no recommendations are made for conventions of abbreviating the lemma, whether abbreviation of each word, or suppression of all but the first and last word, etc. 
 Where it is intended that the apparatus be complete enough to allow the reconstruction of the witnesses (or at least of their non-orthographic variations), simple location-reference methods are unlikely to be as successful as the other two methods, which allow the unambiguous reconstruction of the lemma from the encoding. 
 The Double End-Point Attachment Method 
 In the double end-point attachment method, the beginning and end of the lemma in the base text are both explicitly indicated. It thus differs from the location-referenced method, in which only the larger span of text containing the lemma is indicated. Double end-point attachment permits unambiguous matching of each variant reading against its lemma. It or the parallel-segmentation method should be used in all cases where this is desired, for example where the apparatus is intended to enable full reconstruction of the text, or of the substantives, of every witness. 
 When the double end-point attachment method is used, the from and to attributes of the app element are used to indicate the beginning and ending points of the reading in the base text: their values are identifiers which occur at the locations in question. If no other markup is present there, the beginning and ending points should be marked using the anchor element defined in chapter . In cases where it is not possible to insert anchors within the base text (e.g. where the text is on a read-only medium) the beginning and end of the lemma may be indicated by using the indirect pointing mechanisms discussed in chapter . Explicit anchors are more likely to be reliable, and are therefore to be preferred. 
 The double end-point attachment method may be used with in-line or external apparatus. In the latter case, the base text (here El) will appear with anchor elements inserted at every place where a variant begins or ends (unless some element with an identifier already begins or ends at that point): The apparatus will be separately encoded: No anchor element is needed at the beginning of the line, since the from attribute can use the identifier for the line as a whole; the lemma is assumed to run from the beginning of the element indicated by the from attribute, to the end of that indicated by the to attribute. If no value is given for to, the lemma runs from the beginning to the end of the element indicated by the from attribute. 
 When the apparatus is encoded in-line, it is dispersed through the base text. Only the beginning of the lemma need be marked with an anchor, since the app is inserted at the end of the lemma, and itself therefore marks the end of the lemma. 
 The lemma need not be repeated within the app element in this method, as it may be extracted reliably from the base text. If an exhaustive list of witnesses is available, it will also not be necessary to specify just which manuscripts agree with the base text to enable reconstruction of witnesses. An application will be able to determine the manuscripts that witness the base reading, by noting which witnesses are attested as having a variant reading, and inferring the base text reading for all others after adjusting for fragmentary witnesses and for witnesses carrying overlapping variant readings. 
 Alternatively, if it is desired to make an explicit record of the attestation of the base text, the lem element may be embedded within app, carrying the witnesses to the base. Thus 
 This method is designed to cope with overlapping lemmata. For example, at line 117 of the Wife of Bath's Prologue, the manuscripts Hg (Hengwrt), El (Ellesmere), and Ha4 (British Library Harleian 7334) read: Hg And of so parfit wys a wight ywroght El And for what profit was a wight ywroght Ha4 And in what wise was a wight ywroght 
 In this case, one might wish to record in what wise was in Ha4 as a single variant for of so parfit wys in Hg, and was a wight in El and Ha4 as a variant on wys a wight in Hg. This method can readily cope with such difficult situations, typically found in large and complex traditions: The parallel segmentation method, to be discussed next, cannot handle overlaps among variants, and would require the individual variants to be split into pieces. 
 Because creation and interpretation of double end-point attachment apparatus will be lengthy and difficult it is likely that they will usually be created and examined by scholars only with mechanical assistance. 
 The Parallel Segmentation Method 
 This method differs from the double end-point attachment method in that all variants at any point of the text are expressed as variants on one another. In this method, no two variations can overlap, although they may nest. The texts compared are divided into matching segments all synchronized with one another. This permits direct comparison of any span of text in any witness with that in any other witness. It is also very easy with this method for an application to extract the full text of any one witness from the apparatus. 
 This method will (by definition) always be satisfactory when there are just two texts for comparison (assuming they are in the same language and script). It will however be less convenient for very complex traditions, where establishing a base text with variations from it is not a satisfactory goal for the edition, or in some cases where every detail of variation needs to be modeled. 
 In the parallel segmentation method, each segment of text on which there is variation is marked by an app element. If there is a preferred (or base) reading it is tagged with lem; each reading is given in a rdg element: 
 This method cannot be used with external apparatus: it must be used in-line. Note that apparatus encoded with this method may be translated into the double end-point attachment method and back without loss of information. Where double-end-point-attachment encodings have no overlapping lemmata, translation of these to the parallel segmentation encoding and back will also be possible without loss of information. 
 For economy, the witnesses to the reading most widely attested need not be stated. Since all manuscripts must be represented in all apparatus entries, it will be possible for an application to read a listWit declaring all the witnesses to the text and then calculate which witnesses have not been named. In the example below, only La and Ra2 are identified explicitly with a reading; an application might successfully infer from this that Experience, whose witnesses are not given, must be attested by El and Hg. To avoid confusion, however, witnesses may be omitted only for a single reading. 
 Alternatively, the witnesses for every reading may be stated, as in the first example. 
 As noted, apparatus entries may nest in this method: if an imaginary fifth manuscript of the text read Auctoritee, though none experience, the variation on the individual words of the line would nest within that for the line as a whole: 
 Parallel segmentation cannot, however, deal very gracefully with variants which overlap without nesting: such variants must be broken up into pieces in order to keep all witnesses synchronized. 
 Other Linking Methods 
  When an apparatus is provided it does not need to be given at the location in the transcription where the variation, emendation, attribution, or other apparatus observation occurs. Instead it may be stored in a separate place in the same file, or indeed in another file, and point to the location at which it is meant to be used. Storing apparatus entries separately can be beneficial when encoding multiple competing, potentially overlapping, interpretations of the same point in the source texts. 
  The location-referenced method can be used to point a position in a text using the loc attribute and a canonical reference that is understood and documented in the context of the file where it is used. Where possible it is recommended that other methods use the from attribute to point to an xml:id attribute on an anchor or other element at the location where the apparatus observation takes place. The contents of an element pointed to are understood to be equivalent to a lem if none exists in the app, and if a lem does exist this should replace any content. 
 The from attribute is a data.pointer datatype and thus contains a URI as a value. This means that it can point directly to an xml:id, an xml:id in another local file, or indeed a file identified by any URL or URN. This could also be encoded as: However, this should be considered more fragile since a full reading of the lem is not provided in the source file. 
  In addition, URLs can contain XPointer schemes including xpath(), range(), and string-range() which can be used in providing the location of an app that is stored separately from the text to which it applies. Both from and to can be used, as in the double end-point attachment method, to identify the starting and ending location for an apparatus using XPointer schemes described in section to more precisely identify this location where beneficial. 
 If only the from attribute is provided then it should be understood that this supplies the location of the textual variance that the apparatus documents. If the from attribute contains an XPointer scheme that identifies a range of text (or elements) then this is understood to record the starting and ending of the range as in the double end-point attachment method. In such a case a @to attribute is unnecessary. 
 Using Apparatus Elements in Transcriptions 
 It is often desirable to record different transcriptions of one stretch of text. These variant transcriptions may be grouped within a single app element. An application may then construct different views of the transcription by extraction of the appropriate variant readings from the apparatus elements embedded in the transcription. 
 For example, alternative expansions can be recorded in several different expan elements, all grouped within an app element. Consider, for example, the three different transcriptions given below of line 105 of the Hengwrt manuscript of Chaucer's The Wife of Bath's Prologue. The last word of the line Virginite is grete perfection is written perfectio followed by two minims over which a bar has been drawn, which has been read in different ways by different scholars. The first transcription, by Elizabeth Solopova, represents the two minims with bar above as a special composite character using the g element. This transcription notes this as a mark of abbreviation but gives no expansion for it. A second transcriber, F. J. Furnivall, regards the bar as an abbreviation of u, and therefore reads the two minims as an n. A third transcriber, P. G. Ruggiers, regards the bar as an abbreviation of n, reading the minims as u. This information may be held within an app structure, as follows: This example uses special purpose elements am and ex used to represent abbreviation marks and editorial expansion respectively; these elements are provided by the transcr module documented in chapter , which should be consulted for further discussion of methods of representing multiple readings of a source. 
 Editorial notes may also be attached to app structures within transcriptions. Here, editorial preference for Ruggiers' expansion and an explanation of that preference is given: 
 In most cases, elements used to indicate features of a primary textual source may be represented within an app structure simply by nesting them within its readings, just as the am and ex elements are nested within the rdg elements in the example just given. However, in cases where the tagged feature extends across a span of text which might itself contain variant readings which it is desired to represent by app structures, some adaptation of the tagging may be necessary. For example, a span of text may be marked in the transcription of the primary source as a single deletion but it may be desirable to represent just a few words from this source as individual deletions within the context of a critical apparatus drawing together readings from this and several other witnesses. In this case, the tagging of the span of words as one deletion may need to be decomposed into a series of one-word deletions for encoding within the apparatus. If it is important to record the fact that all were deleted by the same act, the markup may use the join element or the next and prev attributes defined by chapter . 
 Strategies for Encoding Variation 
 Textual variation may manifest itself in many ways. Variation most frequently occurs at the phrase level, but is also common at higher structural levels, such as the verse line, paragraph, or chapter. When these structures are involved, some care must be taken in their encoding to ensure that TEI's Abstract Model is not being broken. It would be an error, for example, to have a div in the lem, but a p in a rdg inside the same apparatus entry, because these structures cannot occur at the same level. Similarly, it is an error if the contents of an apparatus entry place a p inside another p or an l inside an l. 
 Phenomena such as omissions and transpositions in witnesses will require some encoding strategies that differ from those in the examples above. An omission in one witness may be encoded using an empty rdg, thus: Notice that in this example, the variation occurs at the unit of the verse line. The scribe of MS J has skipped line 18 (probably by mistake) because, like line 19, it begins with the name "Hypsipyle." 
 Transpositions are harder to encode, because they involve variation that occurs in different locations. A single app will therefore not be sufficient, and the variants must be linked. For example, in his edition of Propertius 1.16, Housman printed lines 25-6 after line 32, Heyworth prints them in place. We might encode Heyworth's edition, which records Housman's conjecture despite disagreeing with it, as follows: and then, after line 32: Note that both apps are linked via the exclude attribute, because they are mutually exclusive: if one reading is chosen for display in a reading interface, for example, the other must disappear and vice versa. To avoid repetition, the second pair of lines can make use of the copyOf attribute. If they were both transposed and somewhat different, then both sets would be written in full. 
 Apparatus entries may nest when there is variation at both higher and lower structural levels, e.g.: Here, MS C omits lines 8-11, but there are variations the editor wishes to record in the other witnesses which do have these lines. Therefore, an outer app gives the lines in the lem and the omission in a rdg. Further variation is encoded for lines 8 and 9 using nested apps. 
 Module for Critical Apparatus 
 The module described in this chapter makes available the following components: The selection and combination of modules to form a TEI schema is described in . 
 